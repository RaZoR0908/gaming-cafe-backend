const mongoose = require('mongoose');

// Defines the schema for an individual gaming system.
// Each system will be an object within a room's 'systems' array.
const systemSchema = new mongoose.Schema({
  // A unique, human-readable ID generated by the frontend (e.g., PC01, PS501)
  systemId: { 
    type: String,
    required: true,
  },
  // The type of the system (e.g., 'PC', 'PS5')
  type: { 
    type: String,
    required: true,
  },
  // The current status of the system, crucial for booking logic.
  status: {
    type: String,
    enum: ['Available', 'Active', 'Under Maintenance'],
    default: 'Available',
  },
  // NEW: Track active booking for this system
  activeBooking: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Booking',
    default: null,
  },
  // A nested object to hold specifications, primarily for PCs.
  specs: { 
    ram: { type: String },
    processor: { type: String },
    graphicsCard: { type: String },
  },
  // The price for booking this specific system.
  pricePerHour: {
    type: Number,
    required: true,
  },
}, { _id: false }); // Using _id: false prevents MongoDB from creating a separate _id for each sub-document.

// Defines the schema for a room within the cafe.
const roomSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    trim: true,
  },
  // Each room contains an array of systems, following the systemSchema defined above.
  systems: [systemSchema],
}, { _id: false });

// This is the main schema for the entire cafe document.
const cafeSchema = new mongoose.Schema({
  // A reference to the User who owns this cafe.
  owner: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  name: {
    type: String,
    required: [true, 'Cafe name is required'],
    trim: true,
  },
  address: {
    type: String,
    required: [true, 'Address is required'],
  },
  // GeoJSON format for storing location coordinates, required for geospatial queries.
  location: {
    type: {
      type: String,
      enum: ['Point'],
      required: true,
    },
    coordinates: {
      type: [Number], // [longitude, latitude]
      required: true,
    },
  },
  // An array of image URLs, hosted on a service like Cloudinary.
  images: [{
    type: String,
  }],
  // An array of rooms, following the roomSchema defined above.
  rooms: [roomSchema],
  openingTime: {
    type: String, // e.g., "09:00"
    required: true,
  },
  closingTime: {
    type: String, // e.g., "23:00"
    required: true,
  },
}, {
  // Automatically adds 'createdAt' and 'updatedAt' fields.
  timestamps: true,
});

// Creates a 2dsphere index on the location field.
// This is critical for making location-based queries ('find cafes near me') extremely fast.
cafeSchema.index({ location: '2dsphere' });

const Cafe = mongoose.model('Cafe', cafeSchema);

module.exports = Cafe;
